/*

感谢: https://github.com/Zotov-VD/sliding_up_panel/blob/master/LICENSE
flutter滑动面板修复版
*/

import 'dart:math';

import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter/physics.dart';
import 'package:flutter/rendering.dart';

/// 滑动方向枚举
enum SlideDirection {
  UP,   // 向上滑动
  DOWN, // 向下滑动
}

/// 面板状态枚举
enum PanelState { OPEN, CLOSED } // 打开/关闭

/// 滑动面板组件
class SlidingUpPanel extends StatefulWidget {
  /// 构建滑动面板内容的回调函数
  /// 当面板折叠时，如果 [collapsed] 为 null，
  /// 则显示此 Widget 的顶部部分；
  /// 否则，[collapsed] 将覆盖在此 Widget 上方
  final Widget? Function()? panelBuilder;

  /// 面板折叠时显示在 [panel] 上方的 Widget
  /// 面板打开时此 Widget 会淡出
  final Widget? collapsed;

  /// 位于滑动面板下方的 Widget
  /// 此 Widget 会自动填充整个屏幕
  final Widget? body;

  /// 固定在面板顶部的持久性 Widget
  /// 面板顶部的内容会被此 Widget 覆盖
  /// 在面板底部添加内边距可避免遮挡
  final Widget? header;

  /// 固定在面板底部的持久性 Widget
  /// 面板底部的内容会被此 Widget 覆盖
  /// 在面板底部添加内边距可避免遮挡
  final Widget? footer;

  /// 面板完全折叠时的高度
  final double minHeight;

  /// 面板完全打开时的高度
  final double maxHeight;

  /// 面板动画过程中的吸附点（介于 [minHeight] 和 [maxHeight] 之间）
  /// 快速滑动面板时将忽略此点直接打开/关闭
  /// 此值表示为总动画距离 ([maxHeight] - [minHeight]) 的百分比
  /// 必须在 0.0 和 1.0 之间（不包含端点）
  final double? snapPoint;

  /// 面板边框
  final Border? border;

  /// 面板圆角设置
  final BorderRadiusGeometry? borderRadius;

  /// 面板阴影效果
  final List<BoxShadow>? boxShadow;

  /// 面板背景色
  final Color color;

  /// 面板内边距
  final EdgeInsetsGeometry? padding;

  /// 面板外边距
  final EdgeInsetsGeometry? margin;

  /// 是否渲染面板背景（设置为 false 可创建浮动效果）
  final bool renderPanelSheet;

  /// 是否启用面板吸附效果
  final bool panelSnapping;

  /// 在滚动时是否禁用面板拖动（默认为 false）
  final bool disableDraggableOnScrolling;

  /// 面板控制器（用于控制面板状态）
  final PanelController? controller;

  /// 是否启用背景遮罩
  final bool backdropEnabled;

  /// 背景遮罩颜色
  final Color backdropColor;

  /// 面板完全打开时的遮罩不透明度（0.0 完全透明，1.0 完全不透明）
  final double backdropOpacity;

  /// 点击遮罩是否关闭面板（默认为 true）
  final bool backdropTapClosesPanel;

  /// 面板滑动位置回调（0.0 完全折叠，1.0 完全打开）
  final void Function(double position)? onPanelSlide;

  /// 面板完全打开回调
  final VoidCallback? onPanelOpened;

  /// 面板完全关闭回调
  final VoidCallback? onPanelClosed;

  /// 是否启用视差效果
  final bool parallaxEnabled;

  /// 视差效果强度（0.0 无效果，1.0 完全跟随）
  final double parallaxOffset;

  /// 面板是否可拖动
  final bool isDraggable;

  /// 面板滑动方向
  final SlideDirection slideDirection;

  /// 面板默认状态
  final PanelState defaultPanelState;

  /// 面板内部滚动控制器
  final ScrollController? scrollController;

  SlidingUpPanel(
      {Key? key,
      this.body,
      this.collapsed,
      this.minHeight = 100.0,
      this.maxHeight = 500.0,
      this.snapPoint,
      this.border,
      this.borderRadius,
      this.boxShadow = const <BoxShadow>[
        BoxShadow(
          blurRadius: 8.0,
          color: Color.fromRGBO(0, 0, 0, 0.25),
        )
      ],
      this.color = Colors.white,
      this.padding,
      this.margin,
      this.renderPanelSheet = true,
      this.panelSnapping = true,
      this.disableDraggableOnScrolling = false,
      this.controller,
      this.backdropEnabled = false,
      this.backdropColor = Colors.black,
      this.backdropOpacity = 0.5,
      this.backdropTapClosesPanel = true,
      this.onPanelSlide,
      this.onPanelOpened,
      this.onPanelClosed,
      this.parallaxEnabled = false,
      this.parallaxOffset = 0.1,
      this.isDraggable = true,
      this.slideDirection = SlideDirection.UP,
      this.defaultPanelState = PanelState.CLOSED,
      this.header,
      this.footer,
      this.scrollController,
      this.panelBuilder})
      : assert(panelBuilder != null, "面板构建器不能为空"),
        assert(0 <= backdropOpacity && backdropOpacity <= 1.0, "遮罩不透明度必须在0-1之间"),
        assert(snapPoint == null || 0 < snapPoint && snapPoint < 1.0, "吸附点必须在0-1之间"),
        super(key: key);

  @override
  _SlidingUpPanelState createState() => _SlidingUpPanelState();
}

/// 滑动面板状态类
class _SlidingUpPanelState extends State<SlidingUpPanel>
    with SingleTickerProviderStateMixin {
  late AnimationController _ac;  // 动画控制器
  late final ScrollController _sc;  // 滚动控制器

  bool _scrollingEnabled = false;  // 是否启用滚动
  VelocityTracker _vt = VelocityTracker.withKind(PointerDeviceKind.touch);  // 速度跟踪器

  bool _isPanelVisible = true;  // 面板是否可见

  @override
  void initState() {
    super.initState();

    // 初始化动画控制器
    _ac = AnimationController(
        vsync: this,
        duration: const Duration(milliseconds: 300),
        value: widget.defaultPanelState == PanelState.CLOSED
            ? 0.0  // 默认关闭状态
            : 1.0  // 默认打开状态
    )
      ..addListener(() {
        // 面板滑动回调
        if (widget.onPanelSlide != null) widget.onPanelSlide!(_ac.value);

        // 面板完全打开回调
        if (widget.onPanelOpened != null && _ac.value == 1.0)
          widget.onPanelOpened!();

        // 面板完全关闭回调
        if (widget.onPanelClosed != null && _ac.value == 0.0)
          widget.onPanelClosed!();
      });

    // 初始化滚动控制器
    _sc = widget.scrollController ?? ScrollController();
    _sc.addListener(() {
      // 处理滚动事件
      if (widget.isDraggable &&
          !widget.disableDraggableOnScrolling &&
          (!_scrollingEnabled || _panelPosition < 1) &&
          widget.controller?._forceScrollChange != true)
        _sc.jumpTo(_scMinffset);
    });

    // 关联面板控制器
    widget.controller?._addState(this);
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      alignment: widget.slideDirection == SlideDirection.UP
          ? Alignment.bottomCenter  // 向上滑动时底部对齐
          : Alignment.topCenter,    // 向下滑动时顶部对齐
      children: <Widget>[
        // 背景主体部分
        widget.body != null
            ? AnimatedBuilder(
                animation: _ac,
                builder: (context, child) {
                  return Positioned(
                    top: widget.parallaxEnabled ? _getParallax() : 0.0,  // 视差效果
                    child: child ?? SizedBox(),
                  );
                },
                child: Container(
                  height: MediaQuery.of(context).size.height,
                  width: MediaQuery.of(context).size.width,
                  child: widget.body,
                ),
              )
            : Container(),

        // 背景遮罩层
        !widget.backdropEnabled
            ? Container()
            : GestureDetector(
                onVerticalDragEnd: widget.backdropTapClosesPanel
                    ? (DragEndDetails dets) {
                        // 拖动结束时关闭面板（仅当拖动方向为关闭方向时）
                        if ((widget.slideDirection == SlideDirection.UP
                                    ? 1
                                    : -1) *
                                dets.velocity.pixelsPerSecond.dy >
                            0) _close();
                      }
                    : null,
                onTap: widget.backdropTapClosesPanel ? () => _close() : null,
                child: AnimatedBuilder(
                    animation: _ac,
                    builder: (context, _) {
                      return Container(
                        height: MediaQuery.of(context).size.height,
                        width: MediaQuery.of(context).size.width,
                        // 面板关闭时设置为透明以穿透事件
                        color: _ac.value == 0.0
                            ? null
                            : widget.backdropColor.withOpacity(
                                widget.backdropOpacity * _ac.value),  // 动态透明度
                      );
                    }),
              ),

        // 滑动面板主体
        !_isPanelVisible
            ? Container()
            : _gestureHandler(
                child: AnimatedBuilder(
                  animation: _ac,
                  builder: (context, child) {
                    return Container(
                      // 动态高度计算
                      height: _ac.value * (widget.maxHeight - widget.minHeight) +
                              widget.minHeight,
                      margin: widget.margin,
                      padding: widget.padding,
                      // 面板装饰效果
                      decoration: widget.renderPanelSheet
                          ? BoxDecoration(
                              border: widget.border,
                              borderRadius: widget.borderRadius,
                              boxShadow: widget.boxShadow,
                              color: widget.color,
                            )
                          : null,
                      child: child,
                    );
                  },
                  child: Stack(
                    children: <Widget>[
                      // 打开状态的面板内容
                      Positioned(
                          top: widget.slideDirection == SlideDirection.UP
                              ? 0.0
                              : null,
                          bottom: widget.slideDirection == SlideDirection.DOWN
                              ? 0.0
                              : null,
                          width: MediaQuery.of(context).size.width -
                              (widget.margin != null
                                  ? widget.margin!.horizontal
                                  : 0) -
                              (widget.padding != null
                                  ? widget.padding!.horizontal
                                  : 0),
                          child: Container(
                            height: widget.maxHeight,
                            child: widget.panelBuilder!(),  // 构建面板内容
                          )),

                      // 底部固定部件
                      widget.footer != null
                          ? Positioned(
                              top: widget.slideDirection == SlideDirection.UP
                                  ? null
                                  : 0.0,
                              bottom: widget.slideDirection == SlideDirection.DOWN
                                      ? null
                                      : 0.0,
                              child: widget.footer ?? SizedBox())
                          : Container(),

                      // 顶部固定部件
                      widget.header != null
                          ? Positioned(
                              top: widget.slideDirection == SlideDirection.UP
                                  ? 0.0
                                  : null,
                              bottom: widget.slideDirection == SlideDirection.DOWN
                                      ? 0.0
                                      : null,
                              child: widget.header ?? SizedBox(),
                            )
                          : Container(),

                      // 折叠状态的面板内容
                      Positioned(
                        top: widget.slideDirection == SlideDirection.UP
                            ? 0.0
                            : null,
                        bottom: widget.slideDirection == SlideDirection.DOWN
                            ? 0.0
                            : null,
                        width: MediaQuery.of(context).size.width -
                            (widget.margin != null
                                ? widget.margin!.horizontal
                                : 0) -
                            (widget.padding != null
                                ? widget.padding!.horizontal
                                : 0),
                        child: Container(
                          height: widget.minHeight,
                          child: widget.collapsed == null
                              ? Container()
                              : FadeTransition(
                                  opacity: Tween(begin: 1.0, end: 0.0).animate(_ac),
                                  // 面板打开时忽略折叠内容的触摸事件
                                  child: IgnorePointer(
                                      ignoring: _isPanelOpen,
                                      child: widget.collapsed),
                                ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
      ],
    );
  }

  @override
  void dispose() {
    _ac.dispose();  // 释放动画控制器
    super.dispose();
  }

  /// 计算视差偏移量
  double _getParallax() {
    if (widget.slideDirection == SlideDirection.UP) {
      return -_ac.value *
          (widget.maxHeight - widget.minHeight) *
          widget.parallaxOffset;
    } else {
      return _ac.value *
          (widget.maxHeight - widget.minHeight) *
          widget.parallaxOffset;
    }
  }

  // 手势处理相关变量
  bool _ignoreScrollable = false;  // 是否忽略滚动
  bool _isHorizontalScrollableWidget = false;  // 是否水平滚动部件
  Axis? _scrollableAxis;  // 滚动方向

  /// 手势处理器
  Widget _gestureHandler({required Widget child}) {
    if (!widget.isDraggable) return child;

    return Listener(
      onPointerDown: (PointerDownEvent e) {
        // 获取点击位置
        var rb = context.findRenderObject() as RenderBox;
        var result = BoxHitTestResult();
        rb.hitTest(result, position: e.position);

        // 初始化滚动位置
        if (_panelPosition == 1) {
          _scMinffset = 0.0;
        }
        
        // 检测特殊控件类型
        if (result.path.any((entry) =>
            entry.target.runtimeType == _ForceDraggableWidgetRenderBox)) {
          widget.controller?._nowTargetForceDraggable = true;
          _scMinffset = _sc.offset;
          _isHorizontalScrollableWidget = false;
        } else if (result.path.any((entry) =>
            entry.target.runtimeType == _HorizontalScrollableWidgetRenderBox)) {
          _isHorizontalScrollableWidget = true;
          widget.controller?._nowTargetForceDraggable = false;
        } else if (result.path.any((entry) =>
            entry.target.runtimeType ==
            _IgnoreDraggableWidgetWidgetRenderBox)) {
          _ignoreScrollable = true;
          widget.controller?._nowTargetForceDraggable = false;
          _isHorizontalScrollableWidget = false;
          return;
        } else {
          widget.controller?._nowTargetForceDraggable = false;
          _isHorizontalScrollableWidget = false;
        }
        _ignoreScrollable = false;
        _vt.addPosition(e.timeStamp, e.position);  // 记录位置
      },
      onPointerMove: (PointerMoveEvent e) {
        // 确定滚动方向
        if (_scrollableAxis == null) {
          if (e.delta.dx.abs() > e.delta.dy.abs()) {
            _scrollableAxis = Axis.horizontal;  // 水平滚动
          } else {
            _scrollableAxis = Axis.vertical;    // 垂直滚动
          }
        }

        // 处理水平滚动
        if (_isHorizontalScrollableWidget &&
            _scrollableAxis == Axis.horizontal) {
          return;
        }

        // 处理忽略滚动的情况
        if (_ignoreScrollable) return;
        _vt.addPosition(e.timeStamp, e.position);  // 更新位置
        _onGestureSlide(e.delta.dy);  // 处理滑动
      },
      onPointerUp: (PointerUpEvent e) {
        // 处理滑动结束
        if (_ignoreScrollable) return;
        _scrollableAxis = null;
        _onGestureEnd(_vt.getVelocity());  // 根据速度处理结束动作
      },
      child: child,
    );
  }

  double _scMinffset = 0.0;  // 最小滚动偏移量

  /// 处理滑动手势
  void _onGestureSlide(double dy) {
    // 检查滚动视图是否在顶部
    final bool isScrollAtTop = _sc.positions.isNotEmpty && 
                              _sc.position.pixels <= _sc.position.minScrollExtent;

    // 特殊场景处理：面板打开时，如果内容不在顶部，阻止关闭操作
    if (_isPanelOpen) {
      if (widget.slideDirection == SlideDirection.UP) {
        // 向上滑动：面板打开时向下滑动（dy > 0）且内容不在顶部 => 阻止关闭
        if (dy > 0 && !isScrollAtTop) return;
      } else {
        // 向下滑动：面板打开时向上滑动（dy < 0）且内容不在顶部 => 阻止关闭
        if (dy < 0 && !isScrollAtTop) return;
      }
    }

    // 滚动禁用处理
    if (widget.controller?._nowTargetForceDraggable == false &&
        widget.disableDraggableOnScrolling) {
      return;
    }
    
    // 更新面板位置
    if ((!_scrollingEnabled) ||
        _panelPosition < 1 ||
        widget.controller?._nowTargetForceDraggable == true) {
      if (widget.slideDirection == SlideDirection.UP) {
        _ac.value -= dy / (widget.maxHeight - widget.minHeight);
      } else {
        _ac.value += dy / (widget.maxHeight - widget.minHeight);
      }
    }

    // 更新滚动状态
    if (_isPanelOpen && _sc.hasClients && _sc.offset <= _scMinffset) {
      setState(() {
        // dy < 0 表示向上滑动 => 启用滚动
        if (dy < 0) {
          _scrollingEnabled = true;
        } else {
          _scrollingEnabled = false;
        }
      });
    }
  }

  /// 处理滑动结束
  void _onGestureEnd(Velocity v) {
    // 检查是否应忽略
    if (widget.controller?._nowTargetForceDraggable == false &&
        widget.disableDraggableOnScrolling) {
      return;
    }
    
    double minFlingVelocity = 365.0;  // 最小轻扫速度
    double kSnap = 8;  // 吸附系数

    // 动画正在进行中则忽略
    if (_ac.isAnimating) return;

    // 滚动启用时忽略关闭操作
    if (_isPanelOpen && _scrollingEnabled) return;

    // 计算视觉速度
    double visualVelocity =
        -v.pixelsPerSecond.dy / (widget.maxHeight - widget.minHeight);

    // 根据滑动方向调整速度值
    if (widget.slideDirection == SlideDirection.DOWN) {
      visualVelocity = -visualVelocity;
    }

    // 计算到各位置的距离
    double d2Close = _ac.value;  // 到关闭位置距离
    double d2Open = 1 - _ac.value;  // 到打开位置距离
    double d2Snap = ((widget.snapPoint ?? 3) - _ac.value).abs();  // 到吸附点距离
    double minDistance = min(d2Close, min(d2Snap, d2Open));  // 最小距离

    // 处理轻扫手势
    if (v.pixelsPerSecond.dy.abs() >= minFlingVelocity) {
      // 存在吸附点的情况
      if (widget.panelSnapping && widget.snapPoint != null) {
        if (v.pixelsPerSecond.dy.abs() >= kSnap * minFlingVelocity ||
            minDistance == d2Snap) {
          _ac.fling(velocity: visualVelocity);  // 直接轻扫
        } else {
          _flingPanelToPosition(widget.snapPoint!, visualVelocity);  // 吸附到指定点
        }
      } 
      // 无吸附点的情况
      else if (widget.panelSnapping) {
        _ac.fling(velocity: visualVelocity);
      } 
      // 无吸附效果
      else {
        _ac.animateTo(
          _ac.value + visualVelocity * 0.16,
          duration: Duration(milliseconds: 410),
          curve: Curves.decelerate,
        );
      }
      return;
    }

    // 处理非轻扫结束（吸附逻辑）
    if (widget.panelSnapping) {
      if (minDistance == d2Close) {
        _close();  // 关闭面板
      } else if (minDistance == d2Snap) {
        _flingPanelToPosition(widget.snapPoint!, visualVelocity);  // 吸附到点
      } else {
        _open();  // 打开面板
      }
    }
  }

  /// 将面板吸附到指定位置
  void _flingPanelToPosition(double targetPos, double velocity) {
    final Simulation simulation = SpringSimulation(
        SpringDescription.withDampingRatio(
          mass: 1.0,
          stiffness: 500.0,
          ratio: 1.0,
        ),
        _ac.value,
        targetPos,
        velocity);

    _ac.animateWith(simulation);  // 执行弹性动画
  }

  //------------------------------
  // 面板控制器相关功能
  //------------------------------

  /// 关闭面板
  Future<void> _close() {
    return _ac.fling(velocity: -1.0);
  }

  /// 打开面板
  Future<void> _open() {
    return _ac.fling(velocity: 1.0);
  }

  /// 隐藏面板（完全移出屏幕）
  Future<void> _hide() {
    return _ac.fling(velocity: -1.0).then((x) {
      setState(() {
        _isPanelVisible = false;
      });
    });
  }

  /// 显示面板（折叠状态）
  Future<void> _show() {
    return _ac.fling(velocity: -1.0).then((x) {
      setState(() {
        _isPanelVisible = true;
      });
    });
  }

  /// 动画到指定位置（0.0-1.0）
  Future<void> _animatePanelToPosition(double value,
      {Duration? duration, Curve curve = Curves.linear}) {
    assert(0.0 <= value && value <= 1.0);
    return _ac.animateTo(value, duration: duration, curve: curve);
  }

  /// 动画到吸附点（需提前设置 snapPoint）
  Future<void> _animatePanelToSnapPoint(
      {Duration? duration, Curve curve = Curves.linear}) {
    assert(widget.snapPoint != null);
    return _ac.animateTo(widget.snapPoint!, duration: duration, curve: curve);
  }

  /// 设置面板位置（0.0-1.0）
  set _panelPosition(double value) {
    assert(0.0 <= value && value <= 1.0);
    _ac.value = value;
  }

  /// 获取当前面板位置（0.0 完全折叠，1.0 完全打开）
  double get _panelPosition => _ac.value;

  /// 面板是否正在动画中
  bool get _isPanelAnimating => _ac.isAnimating;

  /// 面板是否完全打开
  bool get _isPanelOpen => _ac.value == 1.0;

  /// 面板是否完全关闭
  bool get _isPanelClosed => _ac.value == 0.0;

  /// 面板是否显示
  bool get _isPanelShown => _isPanelVisible;
}

/// 面板控制器
class PanelController {
  _SlidingUpPanelState? _panelState;  // 关联的状态对象

  /// 关联状态
  void _addState(_SlidingUpPanelState panelState) {
    this._panelState = panelState;
  }

  bool _forceScrollChange = false;  // 强制滚动变更标志

  /// 在滚动变化期间执行操作（临时启用滚动）
  Future<void> forseScrollChange(Future func) async {
    _forceScrollChange = true;
    _panelState!._scrollingEnabled = true;
    await func;
    if (_panelState!._panelPosition < 1) {
      _panelState!._scMinffset = _panelState!._sc.offset;
    }
    _forceScrollChange = false;
  }

  bool _nowTargetForceDraggable = false;  // 当前目标是否强制可拖动

  /// 检查控制器是否已附加到面板
  bool get isAttached => _panelState != null;

  /// 关闭面板（折叠状态）
  Future<void> close() {
    assert(isAttached, "面板控制器必须附加到 SlidingUpPanel");
    return _panelState!._close();
  }

  /// 完全打开面板
  Future<void> open() {
    assert(isAttached, "面板控制器必须附加到 SlidingUpPanel");
    return _panelState!._open();
  }

  /// 隐藏面板
  Future<void> hide() {
    assert(isAttached, "面板控制器必须附加到 SlidingUpPanel");
    return _panelState!._hide();
  }

  /// 显示面板（折叠状态）
  Future<void> show() {
    assert(isAttached, "面板控制器必须附加到 SlidingUpPanel");
    return _panelState!._show();
  }

  /// 动画到指定位置
  Future<void> animatePanelToPosition(double value,
      {Duration? duration, Curve curve = Curves.linear}) {
    assert(isAttached, "面板控制器必须附加到 SlidingUpPanel");
    assert(0.0 <= value && value <= 1.0, "位置值必须在0-1之间");
    return _panelState!
        ._animatePanelToPosition(value, duration: duration, curve: curve);
  }

  /// 动画到吸附点（需设置 snapPoint）
  Future<void> animatePanelToSnapPoint(
      {Duration? duration, Curve curve = Curves.linear}) {
    assert(isAttached, "面板控制器必须附加到 SlidingUpPanel");
    assert(_panelState!.widget.snapPoint != null, "必须设置吸附点");
    return _panelState!
        ._animatePanelToSnapPoint(duration: duration, curve: curve);
  }

  /// 设置面板位置（无动画）
  set panelPosition(double value) {
    assert(isAttached, "面板控制器必须附加到 SlidingUpPanel");
    assert(0.0 <= value && value <= 1.0, "位置值必须在0-1之间");
    _panelState!._panelPosition = value;
  }

  /// 获取当前面板位置（0.0 完全折叠，1.0 完全打开）
  double get panelPosition {
    assert(isAttached, "面板控制器必须附加到 SlidingUpPanel");
    return _panelState!._panelPosition;
  }

  /// 面板是否正在动画中
  bool get isPanelAnimating {
    assert(isAttached, "面板控制器必须附加到 SlidingUpPanel");
    return _panelState!._isPanelAnimating;
  }

  /// 面板是否完全打开
  bool get isPanelOpen {
    assert(isAttached, "面板控制器必须附加到 SlidingUpPanel");
    return _panelState!._isPanelOpen;
  }

  /// 面板是否完全关闭
  bool get isPanelClosed {
    assert(isAttached, "面板控制器必须附加到 SlidingUpPanel");
    return _panelState!._isPanelClosed;
  }

  /// 面板是否显示
  bool get isPanelShown {
    assert(isAttached, "面板控制器必须附加到 SlidingUpPanel");
    return _panelState!._isPanelShown;
  }
}

/// 忽略拖动部件（包装后内部元素不会触发面板拖动）
class IgnoreDraggableWidget extends SingleChildRenderObjectWidget {
  final Widget child;

  IgnoreDraggableWidget({
    required this.child,
  }) : super(
          child: child,
        );

  @override
  _IgnoreDraggableWidgetWidgetRenderBox createRenderObject(
    BuildContext context,
  ) {
    return _IgnoreDraggableWidgetWidgetRenderBox();
  }
}

class _IgnoreDraggableWidgetWidgetRenderBox extends RenderPointerListener {
  @override
  HitTestBehavior get behavior => HitTestBehavior.opaque;
}

/// 强制拖动部件（包装后内部元素总是触发面板拖动）
class ForceDraggableWidget extends SingleChildRenderObjectWidget {
  final Widget child;

  ForceDraggableWidget({
    required this.child,
  }) : super(
          child: child,
        );

  @override
  _ForceDraggableWidgetRenderBox createRenderObject(
    BuildContext context,
  ) {
    return _ForceDraggableWidgetRenderBox();
  }
}

class _ForceDraggableWidgetRenderBox extends RenderPointerListener {
  @override
  HitTestBehavior get behavior => HitTestBehavior.opaque;
}

/// 面板专用滚动物理效果
class PanelScrollPhysics extends ScrollPhysics {
  final PanelController controller;
  const PanelScrollPhysics({required this.controller, ScrollPhysics? parent})
      : super(parent: parent);
  
  @override
  PanelScrollPhysics applyTo(ScrollPhysics? ancestor) {
    return PanelScrollPhysics(
        controller: controller, parent: buildParent(ancestor));
  }

  @override
  double applyPhysicsToUserOffset(ScrollMetrics position, double offset) {
    if (controller._nowTargetForceDraggable) return 0.0;  // 强制拖动时禁用滚动
    return super.applyPhysicsToUserOffset(position, offset);
  }

  @override
  Simulation? createBallisticSimulation(
      ScrollMetrics position, double velocity) {
    if (controller._nowTargetForceDraggable) {
      return super.createBallisticSimulation(position, 0);  // 强制拖动时停止滚动
    }
    return super.createBallisticSimulation(position, velocity);
  }

  @override
  bool get allowImplicitScrolling => false;
}

/// 水平滚动部件（防止在水平滚动元素上误触发面板拖动）
class HorizontalScrollableWidget extends SingleChildRenderObjectWidget {
  final Widget child;

  HorizontalScrollableWidget({
    required this.child,
  }) : super(
          child: child,
        );

  @override
  _HorizontalScrollableWidgetRenderBox createRenderObject(
    BuildContext context,
  ) {
    return _HorizontalScrollableWidgetRenderBox();
  }
}

class _HorizontalScrollableWidgetRenderBox extends RenderPointerListener {
  @override
  HitTestBehavior get behavior => HitTestBehavior.opaque;
}
